From b5a4d2c3e53c14b22191d34eccd024b288cfae87 Mon Sep 17 00:00:00 2001
From: Jerome Laban <jerome.laban@nventive.com>
Date: Wed, 16 Feb 2022 08:08:18 -0500
Subject: [PATCH] fix: Expose IDBFS in ES6 createDotnetRuntime

---
 src/mono/wasm/runtime/cjs/dotnet.cjs.lib.js | 2 +-
 src/mono/wasm/runtime/es6/dotnet.es6.lib.js | 2 +-
 src/mono/wasm/runtime/es6/dotnet.es6.pre.js | 2 +-
 src/mono/wasm/runtime/exports.ts            | 4 +++-
 4 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/mono/wasm/runtime/cjs/dotnet.cjs.lib.js b/src/mono/wasm/runtime/cjs/dotnet.cjs.lib.js
index cf48f0196ef..33b3b8d7aa8 100644
--- a/src/mono/wasm/runtime/cjs/dotnet.cjs.lib.js
+++ b/src/mono/wasm/runtime/cjs/dotnet.cjs.lib.js
@@ -13,7 +13,7 @@ const DotnetSupportLib = {
 let __dotnet_replacements = {readAsync, fetch: globalThis.fetch, require};
 let __dotnet_exportedAPI = __dotnet_runtime.__initializeImportsAndExports(
     { isESM:false, isGlobal:ENVIRONMENT_IS_GLOBAL, isNode:ENVIRONMENT_IS_NODE, isShell:ENVIRONMENT_IS_SHELL, isWeb:ENVIRONMENT_IS_WEB, locateFile, quit_, ExitStatus, requirePromise:Promise.resolve(require)}, 
-    { mono:MONO, binding:BINDING, internal:INTERNAL, module:Module },
+    { mono:MONO, binding:BINDING, internal:INTERNAL, module:Module, idbfs:IDBFS },
     __dotnet_replacements);
 readAsync = __dotnet_replacements.readAsync;
 var fetch = __dotnet_replacements.fetch;
diff --git a/src/mono/wasm/runtime/es6/dotnet.es6.lib.js b/src/mono/wasm/runtime/es6/dotnet.es6.lib.js
index 6ce5164f69e..4f0f651faa7 100644
--- a/src/mono/wasm/runtime/es6/dotnet.es6.lib.js
+++ b/src/mono/wasm/runtime/es6/dotnet.es6.lib.js
@@ -50,7 +50,7 @@ if (ENVIRONMENT_IS_NODE) {
 }
 let __dotnet_exportedAPI = __dotnet_runtime.__initializeImportsAndExports(
     { isESM:true, isGlobal:false, isNode:ENVIRONMENT_IS_NODE, isShell:ENVIRONMENT_IS_SHELL, isWeb:ENVIRONMENT_IS_WEB, locateFile, quit_, ExitStatus, requirePromise:__dotnet_replacements.requirePromise }, 
-    { mono:MONO, binding:BINDING, internal:INTERNAL, module:Module },
+    { mono:MONO, binding:BINDING, internal:INTERNAL, module:Module, idbfs:IDBFS },
     __dotnet_replacements);
 readAsync = __dotnet_replacements.readAsync;
 var fetch = __dotnet_replacements.fetch;
diff --git a/src/mono/wasm/runtime/es6/dotnet.es6.pre.js b/src/mono/wasm/runtime/es6/dotnet.es6.pre.js
index 69d41d5a063..e9d2f6b9ab2 100644
--- a/src/mono/wasm/runtime/es6/dotnet.es6.pre.js
+++ b/src/mono/wasm/runtime/es6/dotnet.es6.pre.js
@@ -2,7 +2,7 @@ const MONO = {}, BINDING = {}, INTERNAL = {};
 let ENVIRONMENT_IS_GLOBAL = false;
 if (typeof createDotnetRuntime === "function") {
     Module = { ready: Module.ready };
-    const extension = createDotnetRuntime({ MONO, BINDING, INTERNAL, Module })
+    const extension = createDotnetRuntime({ MONO, BINDING, INTERNAL, Module, IDBFS })
     if (extension.ready) {
         throw new Error("MONO_WASM: Module.ready couldn't be redefined.")
     }
diff --git a/src/mono/wasm/runtime/exports.ts b/src/mono/wasm/runtime/exports.ts
index 5c4108736cd..9248db78b46 100644
--- a/src/mono/wasm/runtime/exports.ts
+++ b/src/mono/wasm/runtime/exports.ts
@@ -135,10 +135,11 @@ let exportedAPI: DotnetPublicAPI;
 // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
 function initializeImportsAndExports(
     imports: { isESM: boolean, isGlobal: boolean, isNode: boolean, isShell: boolean, isWeb: boolean, locateFile: Function, quit_: Function, ExitStatus: ExitStatusError, requirePromise: Promise<Function> },
-    exports: { mono: any, binding: any, internal: any, module: any },
+    exports: { mono: any, binding: any, internal: any, module: any, idbfs: any },
     replacements: { fetch: any, readAsync: any, require: any, requireOut: any, noExitRuntime: boolean },
 ): DotnetPublicAPI {
     const module = exports.module as DotnetModule;
+    const idbfs = exports.idbfs;
     const globalThisAny = globalThis as any;
 
     // we want to have same instance of MONO, BINDING and Module in dotnet iffe
@@ -154,6 +155,7 @@ function initializeImportsAndExports(
         BINDING: exports.binding,
         INTERNAL: exports.internal,
         Module: module,
+        IDBFS: idbfs,
         RuntimeBuildInfo: {
             ProductVersion,
             Configuration
-- 
2.21.0.windows.1

