From 2b7d70bfbaacfda4def892dd909463e9b0a38ede Mon Sep 17 00:00:00 2001
From: Jerome Laban <jerome.laban@nventive.com>
Date: Mon, 7 Mar 2022 13:11:06 -0500
Subject: [PATCH] feat: Add log profiler support

---
 .../Directory.Build.props                      |  1 +
 src/mono/mono.proj                             |  3 +++
 src/mono/mono/mini/mini-wasm.c                 |  1 -
 src/mono/mono/profiler/CMakeLists.txt          |  7 +++++++
 src/mono/mono/profiler/helper.c                |  6 ++++++
 src/mono/mono/profiler/log.c                   | 18 +++++++++++++++++-
 6 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/src/installer/pkg/sfx/Microsoft.NETCore.App/Directory.Build.props b/src/installer/pkg/sfx/Microsoft.NETCore.App/Directory.Build.props
index 25f85539d73..9e5f2e7d73c 100644
--- a/src/installer/pkg/sfx/Microsoft.NETCore.App/Directory.Build.props
+++ b/src/installer/pkg/sfx/Microsoft.NETCore.App/Directory.Build.props
@@ -207,6 +207,7 @@
     <PlatformManifestFileEntry Include="libmono-icall-table.a" IsNative="true" />
     <PlatformManifestFileEntry Include="libmono-ilgen.a" IsNative="true" />
     <PlatformManifestFileEntry Include="libmono-profiler-aot.a" IsNative="true" />
+    <PlatformManifestFileEntry Include="libmono-profiler-log.a" IsNative="true" />
     <PlatformManifestFileEntry Include="libmono-wasm-eh-js.a" IsNative="true" />
     <PlatformManifestFileEntry Include="libmono-wasm-eh-wasm.a" IsNative="true" />
     <PlatformManifestFileEntry Include="dotnet.js" IsNative="true" />
diff --git a/src/mono/mono.proj b/src/mono/mono.proj
index c0122578a9b..36e84b77356 100644
--- a/src/mono/mono.proj
+++ b/src/mono/mono.proj
@@ -863,6 +863,9 @@
       <_MonoRuntimeArtifacts Condition="'$(TargetsBrowser)' == 'true' and '$(BuildMonoAOTCrossCompilerOnly)' != 'true'" Include="$(MonoObjDir)out\lib\libmono-profiler-aot.a">
         <Destination>$(RuntimeBinDir)libmono-profiler-aot.a</Destination>
       </_MonoRuntimeArtifacts>
+      <_MonoRuntimeArtifacts Condition="'$(TargetsBrowser)' == 'true' and '$(BuildMonoAOTCrossCompilerOnly)' != 'true'" Include="$(MonoObjDir)out\lib\libmono-profiler-log.a">
+        <Destination>$(RuntimeBinDir)libmono-profiler-log.a</Destination>
+      </_MonoRuntimeArtifacts>
       <_MonoRuntimeArtifacts Condition="'$(TargetsBrowser)' == 'true' and '$(BuildMonoAOTCrossCompilerOnly)' != 'true'" Include="$(MonoObjDir)out\lib\libmono-wasm-eh-js.a">
         <Destination>$(RuntimeBinDir)libmono-wasm-eh-js.a</Destination>
       </_MonoRuntimeArtifacts>
diff --git a/src/mono/mono/mini/mini-wasm.c b/src/mono/mono/mini/mini-wasm.c
index 4d1af4eeb52..26781cea2b1 100644
--- a/src/mono/mono/mini/mini-wasm.c
+++ b/src/mono/mono/mini/mini-wasm.c
@@ -527,7 +527,6 @@ mono_init_native_crash_info (void)
 void
 mono_runtime_setup_stat_profiler (void)
 {
-	g_error ("mono_runtime_setup_stat_profiler");
 }
 
 gboolean
diff --git a/src/mono/mono/profiler/CMakeLists.txt b/src/mono/mono/profiler/CMakeLists.txt
index 4f860a1c826..6c40d4d7a11 100644
--- a/src/mono/mono/profiler/CMakeLists.txt
+++ b/src/mono/mono/profiler/CMakeLists.txt
@@ -6,6 +6,7 @@ include_directories(
   ${PROJECT_BINARY_DIR}/../../mono/eglib
   ${CMAKE_CURRENT_SOURCE_DIR}/../..
   ${PROJECT_SOURCE_DIR}/../
+  ${PROJECT_SOURCE_DIR}/../../../native/public
   ${PROJECT_SOURCE_DIR}/../eglib
   ${PROJECT_SOURCE_DIR}/../sgen)
 
@@ -29,6 +30,12 @@ if(NOT DISABLE_LIBS)
     endif()
   endif()
 
+  if(HOST_WASM)
+    add_library(mono-profiler-log-static STATIC helper.c log.c log-args.c)
+    set_target_properties(mono-profiler-log-static PROPERTIES OUTPUT_NAME mono-profiler-log)
+    install(TARGETS mono-profiler-log-static LIBRARY)
+  endif()
+
   if(NOT HOST_WASI)
     add_library(mono-profiler-aot-static STATIC aot.c helper.c)
     target_link_libraries(mono-profiler-aot-static monoapi)
diff --git a/src/mono/mono/profiler/helper.c b/src/mono/mono/profiler/helper.c
index 0283672e7b3..4b07631d3b5 100644
--- a/src/mono/mono/profiler/helper.c
+++ b/src/mono/mono/profiler/helper.c
@@ -8,7 +8,9 @@
 
 #include <config.h>
 
+#if !defined (HOST_WASM)
 #include <mono/utils/mono-logger-internals.h>
+#endif
 
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
@@ -42,6 +44,7 @@ mono_profhelper_close_socket_fd (int fd)
 void
 mono_profhelper_setup_command_server (SOCKET *server_socket, int *command_port, const char* profiler_name)
 {
+#if !defined (HOST_WASM)
 	*server_socket = socket (PF_INET, SOCK_STREAM, 0);
 
 	if (*server_socket == INVALID_SOCKET) {
@@ -77,11 +80,13 @@ mono_profhelper_setup_command_server (int *server_socket, int *command_port, con
 	}
 
 	*command_port = ntohs (server_address.sin_port);
+#endif
 }
 
 void
 mono_profhelper_add_to_fd_set (fd_set *set, SOCKET fd, int *max_fd)
 {
+#if !defined (HOST_WASM)
 	/*
 	 * This should only trigger for the basic FDs (server socket, pipes) at
 	 * startup if for some mysterious reason they're too large. In this case,
@@ -99,4 +104,5 @@ mono_profhelper_add_to_fd_set (fd_set *set, SOCKET fd, int *max_fd)
 
 	if (*max_fd < GUINT64_TO_INT(fd))
 		*max_fd = (int)fd;
+#endif
 }
diff --git a/src/mono/mono/profiler/log.c b/src/mono/mono/profiler/log.c
index 2d3e7d403b5..7cbc9bf1563 100644
--- a/src/mono/mono/profiler/log.c
+++ b/src/mono/mono/profiler/log.c
@@ -4041,6 +4041,7 @@ runtime_initialized (MonoProfiler *profiler)
 
 	mono_os_sem_init (&log_profiler.attach_threads_sem, 0);
 
+#if !defined (HOST_WASM)
 	/*
 	 * We must start the helper thread before the writer thread. This is
 	 * because start_helper_thread () sets up the command port which is written
@@ -4049,6 +4050,9 @@ runtime_initialized (MonoProfiler *profiler)
 	start_helper_thread ();
 	start_writer_thread ();
 	start_dumper_thread ();
+#else
+	dump_header ();
+#endif
 
 	/*
 	 * Wait for all the internal threads to be started. If we don't do this, we
@@ -4132,7 +4136,7 @@ create_profiler (const char *args, const char *filename, GPtrArray *filters)
 		}
 	}
 	if (*nf == '|') {
-#if HAVE_API_SUPPORT_WIN32_PIPE_OPEN_CLOSE && !defined (HOST_WIN32)
+#if HAVE_API_SUPPORT_WIN32_PIPE_OPEN_CLOSE && !defined (HOST_WIN32) && !defined (HOST_WASM)
 		log_profiler.file = popen (nf + 1, "w");
 		log_profiler.pipe_output = 1;
 #else
@@ -4180,6 +4184,18 @@ create_profiler (const char *args, const char *filename, GPtrArray *filters)
 	log_profiler.startup_time = current_time ();
 }
 
+#if defined (HOST_WASM)
+MONO_API void
+mono_profiler_flush_log ();
+
+void
+mono_profiler_flush_log ()
+{
+	while (handle_writer_queue_entry ());	
+	while (handle_dumper_queue_entry ());
+}
+#endif
+
 MONO_API void
 mono_profiler_init_log (const char *desc);
 
-- 
diff --git a/src/mono/wasm/runtime/profiler.ts b/src/mono/wasm/runtime/profiler.ts
index 45845417e83..bc3164e030e 100644
--- a/src/mono/wasm/runtime/profiler.ts
+++ b/src/mono/wasm/runtime/profiler.ts
@@ -2,7 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 import { Module } from "./imports";
-import { AOTProfilerOptions, CoverageProfilerOptions } from "./types";
+import { AOTProfilerOptions, CoverageProfilerOptions, LogProfilerOptions } from "./types";
 
 // Initialize the AOT profiler with OPTIONS.
 // Requires the AOT profiler to be linked into the app.
@@ -38,3 +38,8 @@ export function mono_wasm_init_coverage_profiler(options: CoverageProfilerOption
     const arg = "coverage:write-at-method=" + options.writeAt + ",send-to-method=" + options.sendTo;
     Module.ccall("mono_wasm_load_profiler_coverage", null, ["string"], [arg]);
 }
+
+// options = { configuration: "log profiler options string" }
+export function mono_wasm_init_log_profiler(options: LogProfilerOptions): void {
+    Module.ccall('mono_wasm_load_profiler_log', null, ['string'], [options.configuration]);
+}
\ No newline at end of file
diff --git a/src/mono/wasm/runtime/startup.ts b/src/mono/wasm/runtime/startup.ts
index c576927f177..4a377c98c57 100644
--- a/src/mono/wasm/runtime/startup.ts
+++ b/src/mono/wasm/runtime/startup.ts
@@ -9,7 +9,7 @@ import cwraps, { init_c_exports } from "./cwraps";
 import { mono_wasm_raise_debug_event, mono_wasm_runtime_ready } from "./debug";
 import { mono_wasm_globalization_init } from "./icu";
 import { toBase64StringImpl } from "./base64";
-import { mono_wasm_init_aot_profiler, mono_wasm_init_coverage_profiler } from "./profiler";
+import { mono_wasm_init_aot_profiler, mono_wasm_init_coverage_profiler, mono_wasm_init_log_profiler } from "./profiler";
 import { mono_on_abort, mono_exit } from "./run";
 import { initialize_marshalers_to_cs } from "./marshal-to-cs";
 import { initialize_marshalers_to_js } from "./marshal-to-js";
@@ -419,6 +419,10 @@ async function _apply_configuration_from_args() {
 
     if (config.coverageProfilerOptions)
         mono_wasm_init_coverage_profiler(config.coverageProfilerOptions);
+
+    if (config.logProfilerOptions)
+        mono_wasm_init_log_profiler(config.logProfilerOptions);
+
     // for non-Blazor, init diagnostics after environment variables are set
     if (MonoWasmThreads) {
         await mono_wasm_init_diagnostics();
-- 
diff --git a/src/mono/wasm/runtime/types.ts b/src/mono/wasm/runtime/types.ts
index ca914585d1d..7f4e02fb74f 100644
--- a/src/mono/wasm/runtime/types.ts
+++ b/src/mono/wasm/runtime/types.ts
@@ -121,6 +121,7 @@ export type MonoConfigInternal = MonoConfig & {
     runtimeOptions?: string[], // array of runtime options as strings
     aotProfilerOptions?: AOTProfilerOptions, // dictionary-style Object. If omitted, aot profiler will not be initialized.
     coverageProfilerOptions?: CoverageProfilerOptions, // dictionary-style Object. If omitted, coverage profiler will not be initialized.
+    logProfilerOptions?: LogProfilerOptions, // dictionary-style Object. If omitted, log profiler will not be initialized.
     waitForDebugger?: number,
     appendElementOnExit?: boolean
     logExitCode?: boolean
@@ -242,6 +243,10 @@ export type CoverageProfilerOptions = {
     sendTo?: string // should be in the format <CLASS>::<METHODNAME>, default: 'WebAssembly.Runtime::DumpCoverageProfileData' (DumpCoverageProfileData stores the data into INTERNAL.coverage_profile_data.)
 }
 
+export type LogProfilerOptions = {
+    configuration?: string //  log profiler options string"
+}
+
 // how we extended emscripten Module
 export type DotnetModule = EmscriptenModule & DotnetModuleConfig;
 
-- 
2.21.0.windows.1
