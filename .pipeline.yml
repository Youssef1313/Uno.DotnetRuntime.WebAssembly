jobs:
- job: Mono_Build

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
    VersionCodeOffset: 400559 # last value for the APK release
    EMSDK_VERSION: 2.0.12
    DOTNETRUNTIME_COMMIT: 34c68c7edf6d61c8ff3d2631003ed86353415479

    # Original location: https://github.com/dotnet/runtime/blob/af2950f9833371c5749b88c7ed62d5189f384bbc/eng/Version.Details.xml#L203
    LINKER_COMMIT: 6b3a3050c70577bd1b3fd7611eef56679e22a4f1

  container: 
    image: unoplatform/wasm-build:2.3
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

  timeoutInMinutes: 240

  workspace:
    clean: all
      
  pool:
    vmImage: 'ubuntu-latest'

  strategy:
    matrix:
      Release:
        BUILD_CONFIGURATION: 'Release'
      #Debug:
      #  BUILD_CONFIGURATION: 'Debug'

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET 5 SDK'
    inputs:
      packageType: sdk
      version: '5.0.101'
      includePreviewVersions: true
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - bash: |
      set -e
      sudo apt-get update
      sudo apt-get install -y python3-pip locales p7zip-full zip
      sudo apt-get install -y unzip python python3.7 msbuild libc6 ninja-build
      sudo apt-get install -y cmake llvm-9 clang-9 autoconf automake \
        libtool build-essential curl git lldb-6.0 liblldb-6.0-dev \
        libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev \
        libssl-dev libnuma-dev libkrb5-dev zlib1g-dev locales
      sudo locale-gen en_US.UTF-8

    displayName: Install dotnet/runtime dependencies

  - bash: |
      set -e
      CURRENT_COMMIT=`git rev-parse --short HEAD`
      echo "##vso[task.setvariable variable=CURRENT_COMMIT]$CURRENT_COMMIT"
      echo "CurrentCommit=$CURRENT_COMMIT"

    displayName: Set Variable from current Commit

  - bash: |
      set -e
      git clone --recursive https://github.com/mono/linker
      cd linker
      git reset --hard $(LINKER_COMMIT)

    displayName: Clone mono/linker

  - bash: |
      set -e
      cd linker
      dotnet msbuild /r /bl /p:Configuration=Release illink.sln

    displayName: Build mono/linker

  - bash: |
      git clone --recursive https://github.com/dotnet/runtime

    displayName: Clone dotnet/runtime

  - bash: |
      set -e
      cd runtime
      git reset --hard $(DOTNETRUNTIME_COMMIT)
      echo dotnet/runtime base SHA1: `git rev-parse HEAD`
      git apply $(Build.SourcesDirectory)/patches/enable-js-exception-trace.patch
      git apply $(Build.SourcesDirectory)/patches/enable-idbfs.patch
      git config --global user.email "ci@platform.uno"
      git config --global user.name "Uno Platform CI"
      git add .
      git commit -m "apply patches"
      echo dotnet/runtime patched SHA1: `git rev-parse HEAD`

    displayName: Apply Patches

  - bash: |
      set -e
      wget -qO- https://cmake.org/files/v3.16/cmake-3.16.5-Linux-x86_64.tar.gz | \
      sudo tar --strip-components=1 -xz -C /usr/local

    displayName: Install cmake 3.16 

  - bash: |
      set -e
      cd ~
      git clone --branch $(EMSDK_VERSION) https://github.com/emscripten-core/emsdk
      cd emsdk
      ./emsdk install $(EMSDK_VERSION)
      ./emsdk activate $(EMSDK_VERSION)
    displayName: 'Setup Emscripten'

  - bash: |
      set -e
      export EMSDK_PATH=~/emsdk
      export MonoEnableAssertMessages=true # enable emsdk assert messages
      cd runtime
      ./build.sh -arch wasm -os Browser -c $(BUILD_CONFIGURATION)

      # Mark AOT generation binaries executable
      chmod +x ./artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/$(BUILD_CONFIGURATION)/runtimes/browser-wasm/native/cross/*

      # Move src and include files to locations compatible with mono's packager
      cd ./artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/$(BUILD_CONFIGURATION)/runtimes/browser-wasm/native
      mv include/wasm/* .
      mv src/* .

    displayName: Build Wasm Runtime

  - bash: |
      LINKER_OUT=runtime/artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/$(BUILD_CONFIGURATION)/tools
      mkdir -p $LINKER_OUT
      cp -r linker/artifacts/bin/Mono.Linker/Release/net5.0/* $LINKER_OUT

    displayName: Copy mono/linker files

  - bash: |
      LINKER_OUT=runtime/artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/$(BUILD_CONFIGURATION)/dbg-proxy/net5
      mkdir -p $LINKER_OUT
      cp -r runtime/artifacts/bin/BrowserDebugHost/wasm/$(BUILD_CONFIGURATION) $LINKER_OUT

    displayName: Copy Wasm Debugger files

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: 'runtime/artifacts/bin/microsoft.netcore.app.runtime.browser-wasm/$(BUILD_CONFIGURATION)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/dotnet-runtime-wasm-$(CURRENT_COMMIT)-$(Build.BuildId)-$(BUILD_CONFIGURATION).zip'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: dotnet-wasm-sdk
      ArtifactType: Container
